# moneyd-xrp commands
systemctl [status|start|stop|restart] moneyd-xrp

# install moneyd-uplink-xrp
npm install -g moneyd-uplink-xrp

# configure with testnet and start
npm install -g moneyd moneyd-uplink-xrp
moneyd --testnet xrp:configure
moneyd --testnet xrp:start

# configure with livenet and start
npm install -g moneyd moneyd-uplink-xrp
moneyd xrp:configure
moneyd xrp:start

# local test network
npm install -g moneyd
moneyd local

# print account info on testnet and livenet
mondeyd --testnet xrp:info
mondeyd xrp:info

# get help
moneyd help
moneyd xrp:configure --help

# Remote deploy
# If you did the previous step on your remote server, then you don't need to run any special software to get moneyd on your 
# local machine. Not only that, but you can grant access to Interledger to as many machines as you want! Just forward 
# the moneyd port 7768 to any machine where you want ILP access by using SSH local port forwarding:
# Replace the user@example.com with the server on which you're running moneyd.

ssh -N -L 7768:localhost:7768 user@example.com

# Reconciliation
# If you crash or encounter a bug, you might find that your moneyd instance forgot to send a claim to its parent connector.
# This results in the parent connector thinking you owe it money, and refusing to forward any of your packets
# To fix this, just stop moneyd and run:
# You can adjust the amount if you need to reconcile more
# The amount is represented in XRP drops; 1000000 is a single XRP so these amounts are typically kept quite small.

moneyd xrp:topup --amount 1000

# clean up channels
# Closing a channel happens in two phases. First you mark the channel for closing. This sets an expiry on the channel
# Next, once the expiry has passed, you can send another close transaction to get your funds back and delete the channel.
# To mark channels for closing, run:

moneyd xrp:cleanup

# Select the channels you'd like to close with <space> and then hit <enter>. 
# If you run moneyd xrp:info you'll see that the channels now have expiries set.
# Expect it to take an hour for the channel to be ready for closing; this gives the counterparty a chance 
# to submit their best claim. Once the hour is up, run cleanup again:

moneyd xrp:cleanup

# This time, the channels should say ready to close. Mark them for closing, and this time they'll go away for good
# Your XRP account will be credited the total channel capacity minus the current channel balance.

# Multiple Instances
# Sometimes you want to run several instances of moneyd with for the same XRP account and parent connector.
# In order to distinguish your instances of moneyd, set a unique "name" when you configure your uplink.
# This "name" will be a segment of your ILP address, so it must only use [A-Za-z0-9\-_~]. 
# The "name" must be unique per parent BTP host.
# You'll have to configure in advanced mode to prompt for the name
#  Don't forget to back up your old ~/.moneyd.json first. 
# Then run configure for the currency you're using. For example, with XRP, run:

moneyd xrp:configure --advanced

# And then when you're prompted for "name", put in the unique name that you want. This will force a fresh channel to be opened.
# You can use as many different "name"s as you want. If you run out of XRP from opening up channels
# just follow Clean Up Channels to reclaim it.


# Sending Payments
# Now that you have moneyd running, you can test it out by uploading a file to unhash.
# Unhash is a simple content-addressed file upload service based on ILP.
# You'll use ILP Curl, which will connect to moneyd and send money to the unhash host.

npm install -g ilp-curl
echo "This is my example file" > example.txt

# use "https://unhash.ilp-test.com" if you're on the testnet"
ilp-curl -X POST https://alpha.unhash.io --data @example.txt
# --> {"digest":"ff5574cef56e644f3fc4d0311b15a3e95f115080bcc029889f9e32121fd60407"}

curl https://alpha.unhash.io/ff5574cef56e644f3fc4d0311b15a3e95f115080bcc029889f9e32121fd60407
# --> "This is my example file"

# Now you've successfully sent an ILP payment to pay for a file upload! Another way to use ILP is with SPSP, 
the simple payment setup protocol.
# This next example will send a micropayment to $sharafian.com.
npm install -g ilp-spsp

# use "$spsp.ilp-test.com" if you're on the testnet
ilp-spsp send --receiver \$sharafian.com --amount 100

# --> paying 100 to "$sharafian.com"...
# --> sent!

# moneyd-xrp config files
/root/.moneyd.json
/usr/lib/node_modules/moneyd-uplink-xrp/connector_list.json

# moneyd-xrp log files
/var/log/messages | grep money
